{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/app-reducer.ts","state/tasks-reducer.ts","Todolist.tsx","state/todolists-reducer.ts","ErrorSnackbar.tsx","App.tsx","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","addItem","useState","title","setTitle","error","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","length","autoFocus","onDoubleClick","instance","axios","create","withCredentials","baseURL","headers","todolistsAPI","get","params","payload","post","delete","todolistId","put","taskId","Task","props","onClickHandler","useCallback","removeTask","task","id","onChangeCheckboxHandler","newIsDoneValue","checked","changeTaskStatus","status","Completed","New","onChangeTitleHandler","changeTaskTitle","className","Checkbox","Delete","initialState","setAppStatus","type","setAppError","Todolist","dispatch","useDispatch","useEffect","res","todoListId","tasks","setTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","filter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","t","removeTodolist","map","style","paddingTop","Button","Alert","ref","elevation","ErrorSnackbar","useSelector","state","app","handleClose","event","reason","Stack","spacing","sx","width","Snackbar","open","autoHideDuration","onClose","severity","App","todolists","addTodolist","resultCode","todolist","addTodolistAC","item","messages","createTodolistTC","changeTodolistTitleAC","changeTodolistTitleTC","changeTodolistFilter","action","changeTodolistFilterAC","removeTodolistAC","deleteTodolistTC","addTaskAC","addTaskTC","getState","find","changeTaskStatusAC","console","log","changeTaskStatusTC","changeTaskTitleAC","changeTaskTitleTC","removeTaskAC","deleteTaskTC","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","Grid","container","padding","tl","allTodolistTasks","Paper","rootReducer","combineReducers","copyState","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2f9b347.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\n\nconst instance = axios.create({\n  withCredentials: true,\n  baseURL: 'https://social-network.samuraijs.com/api/1.1',\n  headers: {\n    'API-KEY': 'cb296593-09e8-482c-8587-896f9cf54a71',\n  },\n})\n\nexport const todolistsAPI = {\n  getTodolists() {\n    return instance.get<Array<TodolistType>>('/todo-lists')\n  },\n  createTodolist(params: { title: string }) {\n    const payload = {title: params.title}\n    return instance.post<TodolistResponseType<{ item: TodolistType }>>('/todo-lists', payload)\n  },\n  deleteTodolist(params: { todolistId: string }) {\n    return instance.delete<TodolistResponseType>(`/todo-lists/${params.todolistId}`)\n  },\n  updateTodolistTitle(params: { todolistId: string, title: string }) {\n    const payload = {title: params.title}\n    return instance.put<TodolistResponseType>(`/todo-lists/${params.todolistId}`, payload)\n  },\n  getTasks(params: { todolistId: string }) {\n    return instance.get<GetTaskResponseType>(`/todo-lists/${params.todolistId}/tasks`)\n  },\n  createTask(params: { todolistId: string, title: string }) {\n    const payload = {title: params.title}\n    return instance.post<TasksResponseType<{ item: TaskType }>>(`/todo-lists/${params.todolistId}/tasks`, payload)\n  },\n  deleteTask(params: { todolistId: string, taskId: string }) {\n    return instance.delete<TasksResponseType>(`/todo-lists/${params.todolistId}/tasks/${params.taskId}`)\n  },\n  updateTask(params: { todolistId: string, taskId: string, payload: UpdateTaskModelType }) {\n    return instance.put<any, AxiosResponse<TasksResponseType<{ item: TaskType }>>, UpdateTaskModelType>(`/todo-lists/${params.todolistId}/tasks/${params.taskId}`, params.payload)\n  },\n}\n\nexport enum TaskStatuses {\n  New,\n  InProgress,\n  Completed,\n  Draft\n}\n\nexport enum TaskPriorities {\n  Low,\n  Middle,\n  Hi,\n  Urgently,\n  Later\n}\n\nexport type TodolistType = {\n  id: string\n  title: string\n  addedDate: string\n  order: number\n}\nexport type TodolistResponseType<D = {}> = {\n  data: D\n  messages: string[]\n  fieldsErrors: string[]\n  resultCode: number\n}\nexport type TaskType = {\n  id: string\n  title: string\n  description: string | null\n  todoListId: string\n  order: number\n  status: TaskStatuses\n  priority: TaskPriorities\n  startDate: string | null\n  deadline: string | null\n  addedDate: string\n}\nexport type GetTaskResponseType = {\n  items: Array<TaskType>\n  totalCount: number\n  error: string | null\n}\nexport type TasksResponseType<D = {}> = {\n  data: D\n  messages: string[]\n  fieldsErrors: string[]\n  resultCode: number\n}\nexport type UpdateTaskModelType = {\n  title: string\n  description: string | null\n  status: number\n  priority: number\n  startDate: string | null\n  deadline: string | null\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {ChangeEvent, FC, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (params: { title: string }) => void\r\n}\r\n\r\nexport const AddItemForm: FC<AddItemFormPropsType> = React.memo(function ({addItem, ...restProps}) {\r\n  let [title, setTitle] = useState('')\r\n  let [error, setError] = useState<string | null>(null)\r\n\r\n  const addItemHandler = () => {\r\n    if (title.trim() !== '') {\r\n      addItem({title});\r\n      setTitle('');\r\n    } else {\r\n      setError('Title is required');\r\n    }\r\n  }\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null);\r\n    }\r\n    if (e.charCode === 13) {\r\n      addItemHandler();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TextField variant=\"outlined\"\r\n                 error={!!error}\r\n                 value={title}\r\n                 onChange={onChangeHandler}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 label=\"Title\"\r\n                 helperText={error}\r\n      />\r\n      <IconButton color=\"primary\" onClick={addItemHandler}>\r\n        <AddBox/>\r\n      </IconButton>\r\n    </>)\r\n})\r\n","import React, {ChangeEvent, FC, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport {setAppError} from \"./state/app-reducer\";\r\n\r\ntype EditableSpanPropsType = {\r\n  value: string\r\n  onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan: FC<EditableSpanPropsType> = React.memo(function ({value, onChange, ...restProps}) {\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [title, setTitle] = useState(value);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n    setTitle(value);\r\n  }\r\n  const activateViewMode = () => {\r\n    if (title.trim().length === 0) {\r\n      setEditMode(false);\r\n      return\r\n    }\r\n    setEditMode(false);\r\n    onChange(title);\r\n  }\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.charCode === 13) {\r\n      if (title.trim().length === 0) {\r\n        setEditMode(false);\r\n        return\r\n      }\r\n      setEditMode(false);\r\n      onChange(title);\r\n    }\r\n  }\r\n  const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  return editMode\r\n    ? <TextField value={title}\r\n                 onChange={onChangeTitleHandler}\r\n                 onBlur={activateViewMode}\r\n                 onKeyPress={onKeyPressHandler}\r\n                 autoFocus\r\n    />\r\n    : <span onDoubleClick={activateEditMode}>{value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from \"./api/todolists-api\";\r\n\r\ntype TaskPropsType = {\r\n  task: TaskType\r\n  todolistId: string\r\n  changeTaskStatus: (params: { taskId: string, status: TaskStatuses, todolistId: string }) => void\r\n  changeTaskTitle: (params: { taskId: string, title: string, todolistId: string }) => void\r\n  removeTask: (params: { taskId: string, todolistId: string }) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n  const onClickHandler = useCallback(() => {\r\n    props.removeTask({taskId: props.task.id, todolistId: props.todolistId})\r\n  }, [props.task.id, props.todolistId]);\r\n\r\n  const onChangeCheckboxHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    let newIsDoneValue = e.currentTarget.checked\r\n    props.changeTaskStatus({\r\n      taskId: props.task.id,\r\n      status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n      todolistId: props.todolistId,\r\n    })\r\n  }, [props.task.id, props.todolistId]);\r\n\r\n  const onChangeTitleHandler = useCallback((title: string) => {\r\n    props.changeTaskTitle({taskId: props.task.id, title, todolistId: props.todolistId})\r\n  }, [props.task.id, props.todolistId]);\r\n\r\n  return (\r\n    <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n      <Checkbox\r\n        checked={props.task.status === TaskStatuses.Completed}\r\n        color=\"primary\"\r\n        onChange={onChangeCheckboxHandler}\r\n      />\r\n\r\n      <EditableSpan value={props.task.title} onChange={onChangeTitleHandler}/>\r\n\r\n      <IconButton onClick={onClickHandler}>\r\n        <Delete/>\r\n      </IconButton>\r\n    </div>)\r\n})\r\n","const initialState: InitialStateType = {\n  status: 'idle',\n  error: null,\n}\n\n// REDUCER\nexport const appReducer = (state = initialState, action: AppReducerActionsType) => {\n  switch (action.type) {\n    case 'APP/SET-STATUS': {\n      return {...state, status: action.status}\n    }\n    case 'APP/SET-ERROR': {\n      return {...state, error: action.error}\n    }\n    default: {\n      return state\n    }\n  }\n}\n\n// ACTION CREATORS\nexport const setAppStatus = (status: RequestAppStatuses) => ({\n  type: 'APP/SET-STATUS',\n  status,\n} as const)\nexport const setAppError = (error: string | null) => ({\n  type: 'APP/SET-ERROR',\n  error,\n} as const)\n\n// TYPES\nexport type RequestAppStatuses = 'idle' | 'loading' | 'succeded' | 'failed'\ntype InitialStateType = {\n  status: RequestAppStatuses\n  error: string | null\n}\n\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatus>\nexport type SetAppErrorsActionType = ReturnType<typeof setAppError>\nexport type AppReducerActionsType =\n  SetAppStatusActionType\n  | SetAppErrorsActionType","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistActionType} from './todolists-reducer';\r\nimport {TasksStateType} from '../App';\r\nimport {TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {AppReducerActionsType, setAppError, setAppStatus} from \"./app-reducer\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\n// REDUCER\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TASK': {\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId),\r\n      }\r\n    }\r\n    case 'ADD-TASK': {\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: [action.task, ...state[action.todolistId]],\r\n      }\r\n    }\r\n    case 'CHANGE-TASK-STATUS': {\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n          ...t,\r\n          status: action.status,\r\n        } : t),\r\n      }\r\n    }\r\n    case 'CHANGE-TASK-TITLE': {\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n          ...t,\r\n          title: action.title,\r\n        } : t),\r\n      }\r\n    }\r\n    case 'ADD-TODOLIST': {\r\n      return {\r\n        ...state,\r\n        [action.todolist.id]: [],\r\n      }\r\n    }\r\n    case 'REMOVE-TODOLIST': {\r\n      const copyState = {...state};\r\n      delete copyState[action.todolistId];\r\n      return copyState;\r\n    }\r\n    case \"SET-TODOLISTS\": {\r\n      let copyState = {...state}\r\n      action.todolists.forEach(tl => {\r\n        copyState[tl.id] = []\r\n      })\r\n      return copyState\r\n    }\r\n    case \"SET-TASKS\": {\r\n      let copyState = {...state}\r\n      copyState[action.todoListId] = action.tasks\r\n      return copyState\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// ACTION CREATORS\r\nexport const setTasksAC = (params: { todolistId: string, tasks: Array<TaskType> }) => ({\r\n  type: 'SET-TASKS',\r\n  todoListId: params.todolistId,\r\n  tasks: params.tasks,\r\n} as const)\r\nexport const removeTaskAC = (params: { taskId: string, todolistId: string }) => {\r\n  return {type: 'REMOVE-TASK', taskId: params.taskId, todolistId: params.todolistId} as const\r\n}\r\nexport const addTaskAC = (params: { task: TaskType, todolistId: string }) => {\r\n  return {type: 'ADD-TASK', task: params.task, todolistId: params.todolistId} as const\r\n}\r\nexport const changeTaskStatusAC = (params: { taskId: string, status: TaskStatuses, todolistId: string }) => {\r\n  return {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    status: params.status,\r\n    todolistId: params.todolistId,\r\n    taskId: params.taskId,\r\n  } as const\r\n}\r\nexport const changeTaskTitleAC = (params: { taskId: string, title: string, todolistId: string }) => {\r\n  return {type: 'CHANGE-TASK-TITLE', title: params.title, todolistId: params.todolistId, taskId: params.taskId} as const\r\n}\r\n\r\n// THUNK CREATORS\r\nexport const setTasksTC = (params: { todolistId: string }) => (dispatch: ThunkDispatchType) => {\r\n  dispatch(setAppStatus('loading'))\r\n  todolistsAPI.getTasks({todolistId: params.todolistId}).then(res => {\r\n    dispatch(setTasksAC({todolistId: params.todolistId, tasks: res.data.items}))\r\n    dispatch(setAppStatus('succeded'))\r\n  })\r\n}\r\nexport const deleteTaskTC = (params: { todolistId: string, taskId: string }) => (dispatch: ThunkDispatchType) => {\r\n  dispatch(setAppStatus('loading'))\r\n  todolistsAPI.deleteTask({todolistId: params.todolistId, taskId: params.taskId}).then(res => {\r\n    dispatch(removeTaskAC({taskId: params.taskId, todolistId: params.todolistId}))\r\n    dispatch(setAppStatus('succeded'))\r\n  })\r\n}\r\nexport const addTaskTC = (params: { title: string, todolistId: string }) => (dispatch: ThunkDispatchType) => {\r\n  dispatch(setAppStatus('loading'))\r\n  todolistsAPI.createTask({todolistId: params.todolistId, title: params.title}).then(res => {\r\n    if (res.data.resultCode === 0) {\r\n      dispatch(addTaskAC({task: res.data.data.item, todolistId: params.todolistId}))\r\n      dispatch(setAppStatus('succeded'))\r\n    } else {\r\n      if (res.data.messages.length !== 0) {\r\n        dispatch(setAppError(res.data.messages[0]))\r\n        dispatch(setAppStatus('failed'))\r\n      } else {\r\n        dispatch(setAppError('Some error ocured'))\r\n        dispatch(setAppStatus('failed'))\r\n      }\r\n    }\r\n  })\r\n}\r\nexport const changeTaskStatusTC = (params: { taskId: string, status: TaskStatuses, todolistId: string }) =>\r\n  (dispatch: ThunkDispatchType, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    const task = getState().tasks[params.todolistId].find(t => t.id === params.taskId)\r\n    if (!task) {\r\n      console.log('Task Not Found')\r\n      return\r\n    }\r\n    const payload: UpdateTaskModelType = {\r\n      ...task,\r\n      status: params.status,\r\n    }\r\n    todolistsAPI.updateTask({todolistId: params.todolistId, taskId: params.taskId, payload}).then(res => {\r\n      dispatch(changeTaskStatusAC({taskId: params.taskId, status: params.status, todolistId: params.todolistId}))\r\n      dispatch(setAppStatus('succeded'))\r\n    })\r\n  }\r\nexport const changeTaskTitleTC = (params: { taskId: string, title: string, todolistId: string }) =>\r\n  (dispatch: ThunkDispatchType, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    const task = getState().tasks[params.todolistId].find(t => t.id === params.taskId)\r\n    if (!task) {\r\n      console.log('Task Not Found')\r\n      return\r\n    }\r\n    const payload: UpdateTaskModelType = {\r\n      ...task,\r\n      title: params.title,\r\n    }\r\n    todolistsAPI.updateTask({todolistId: params.todolistId, taskId: params.taskId, payload}).then(res => {\r\n        dispatch(changeTaskTitleAC({taskId: params.taskId, title: params.title, todolistId: params.todolistId}))\r\n        dispatch(setAppStatus('succeded'))\r\n      },\r\n    )\r\n  }\r\n\r\n\r\n// TYPES\r\ntype ThunkDispatchType = Dispatch<ActionsType | AppReducerActionsType>\r\ntype ActionsType = ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof setTasksAC>\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof changeTaskStatusAC>\r\n  | ReturnType<typeof changeTaskTitleAC>\r\n  | AddTodolistActionType\r\n  | SetTodolistActionType\r\n  | RemoveTodolistActionType","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task'\r\nimport {FilterValuesType} from \"./state/todolists-reducer\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolists-api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setTasksTC} from \"./state/tasks-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n  id: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  changeFilter: (params: {filter: FilterValuesType, todolistId: string}) => void\r\n  addTask: (params: {title: string, todolistId: string}) => void\r\n  changeTaskStatus: (params: {taskId: string, status: TaskStatuses, todolistId: string}) => void\r\n  changeTaskTitle: (params: {taskId: string, title: string, todolistId: string}) => void\r\n  removeTask: (params: {taskId: string, todolistId: string}) => void\r\n  removeTodolist: (params: {todolistId: string}) => void\r\n  changeTodolistTitle: (params: {todolistId: string, title: string}) => void\r\n  filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(setTasksTC({todolistId: props.id}))\r\n  }, [])\r\n\r\n\r\n  const addTask = useCallback((params: {title: string}) => {\r\n    props.addTask({title: params.title ,todolistId: props.id})\r\n  }, [props.addTask, props.id])\r\n\r\n  const removeTodolist = () => {\r\n    props.removeTodolist({todolistId: props.id})\r\n  }\r\n  const changeTodolistTitle = useCallback((title: string) => {\r\n    props.changeTodolistTitle({todolistId:props.id, title:title})\r\n  }, [props.id, props.changeTodolistTitle])\r\n\r\n  const onAllClickHandler = useCallback(() => props.changeFilter({filter: 'all',todolistId: props.id}), [props.id, props.changeFilter])\r\n  const onActiveClickHandler = useCallback(() => {\r\n    props.changeFilter({filter: 'active', todolistId: props.id})\r\n  }, [props.id, props.changeFilter])\r\n  const onCompletedClickHandler = useCallback(() => props.changeFilter({filter: 'completed',todolistId: props.id}), [props.id, props.changeFilter])\r\n\r\n\r\n  let tasksForTodolist = props.tasks\r\n\r\n  if (props.filter === 'active') {\r\n    tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n  }\r\n  if (props.filter === 'completed') {\r\n    tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n        <IconButton onClick={removeTodolist}>\r\n          <Delete/>\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm addItem={addTask}/>\r\n      <div>\r\n        {\r\n          tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n          />)\r\n        }\r\n      </div>\r\n      <div style={{paddingTop: '10px'}}>\r\n        <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                onClick={onAllClickHandler}\r\n                color={'inherit'}\r\n        >All</Button>\r\n        <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                onClick={onActiveClickHandler}\r\n                color={'primary'}\r\n        >Active</Button>\r\n        <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                onClick={onCompletedClickHandler}\r\n                color={'secondary'}\r\n        >Completed</Button>\r\n      </div>\r\n    </div>)\r\n})\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppReducerActionsType, setAppError, setAppStatus} from \"./app-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n// REDUCER\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TODOLIST': {\r\n      return state.filter(tl => tl.id !== action.todolistId)\r\n    }\r\n    case 'ADD-TODOLIST': {\r\n      return [{...action.todolist, filter: 'all'}, ...state]\r\n    }\r\n    case 'CHANGE-TODOLIST-TITLE': {\r\n      return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n    }\r\n    case 'CHANGE-TODOLIST-FILTER': {\r\n      return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n    }\r\n    case \"SET-TODOLISTS\": {\r\n      return action.todolists.map(tl => ({...tl, filter: 'all'}))\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// ACTION CREATORS\r\nexport const addTodolistAC = (params: { todolist: TodolistType }) => ({\r\n  type: 'ADD-TODOLIST',\r\n  todolist: params.todolist,\r\n} as const)\r\nexport const setTodolistsAC = (params: { todolists: Array<TodolistType> }) => ({\r\n  type: 'SET-TODOLISTS',\r\n  todolists: params.todolists,\r\n} as const)\r\nexport const removeTodolistAC = (params: { todolistId: string }) => ({\r\n  type: 'REMOVE-TODOLIST',\r\n  todolistId: params.todolistId,\r\n} as const)\r\nexport const changeTodolistTitleAC = (params: { todolistId: string, title: string }) => ({\r\n  type: 'CHANGE-TODOLIST-TITLE',\r\n  todolistId: params.todolistId,\r\n  title: params.title,\r\n} as const)\r\nexport const changeTodolistFilterAC = (params: { todolistId: string, filter: FilterValuesType }) => ({\r\n  type: 'CHANGE-TODOLIST-FILTER',\r\n  todolistId: params.todolistId,\r\n  filter: params.filter,\r\n} as const)\r\n\r\n// THUNK CREATORS\r\nexport const setTodolistTC = () => (dispatch: ThunkDispatchType) => {\r\n  dispatch(setAppStatus('loading'))\r\n  todolistsAPI.getTodolists().then(res => {\r\n    dispatch(setTodolistsAC({todolists: res.data}))\r\n    dispatch(setAppStatus('succeded'))\r\n  })\r\n}\r\nexport const deleteTodolistTC = (params: { todolistId: string }) => (dispatch: ThunkDispatchType) => {\r\n  dispatch(setAppStatus('loading'))\r\n  todolistsAPI.deleteTodolist({todolistId: params.todolistId}).then(res => {\r\n    dispatch(removeTodolistAC({todolistId: params.todolistId}))\r\n    dispatch(setAppStatus('succeded'))\r\n  })\r\n}\r\nexport const createTodolistTC = (params: { title: string }) => (dispatch: ThunkDispatchType) => {\r\n  dispatch(setAppStatus('loading'))\r\n  todolistsAPI.createTodolist({title: params.title})\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n        dispatch(setAppStatus('succeded'))\r\n      } else {\r\n        if (res.data.messages.length !== 0) {\r\n          dispatch(setAppError(res.data.messages[0]))\r\n          dispatch(setAppStatus('failed'))\r\n        } else {\r\n          dispatch(setAppError('Some error ocured'))\r\n          dispatch(setAppStatus('failed'))\r\n        }\r\n      }\r\n    })\r\n}\r\nexport const changeTodolistTitleTC = (params: { todolistId: string, title: string }) => (dispatch: ThunkDispatchType) => {\r\n  dispatch(setAppStatus('loading'))\r\n  todolistsAPI.updateTodolistTitle({todolistId: params.todolistId, title: params.title}).then(res => {\r\n    dispatch(changeTodolistTitleAC({todolistId: params.todolistId, title: params.title}))\r\n    dispatch(setAppStatus('succeded'))\r\n  })\r\n}\r\n\r\n// TYPES\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n}\r\n\r\ntype ThunkDispatchType = Dispatch<ActionsType | AppReducerActionsType>\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n  | SetTodolistActionType\r\n  | ReturnType<typeof changeTodolistTitleAC>\r\n  | ReturnType<typeof changeTodolistFilterAC>\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistActionType = ReturnType<typeof setTodolistsAC>\r\n\r\n\r\n\r\n\r\n\r\n","import * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\nimport {setAppError} from \"./state/app-reducer\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport const ErrorSnackbar = () => {\n\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n  const dispatch = useDispatch()\n\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(setAppError(null))\n  };\n\n  return (\n    <Stack spacing={2} sx={{width: '100%'}}>\n      <Snackbar open={error !== null} autoHideDuration={10000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n          {error}\n        </Alert>\n      </Snackbar>\n    </Stack>\n  );\n}\n","import React, {useCallback, useEffect} from 'react'\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {\r\n  changeTodolistFilterAC,\r\n  changeTodolistTitleTC,\r\n  createTodolistTC,\r\n  deleteTodolistTC,\r\n  FilterValuesType,\r\n  setTodolistTC,\r\n  TodolistDomainType,\r\n} from './state/todolists-reducer';\r\nimport {addTaskTC, changeTaskStatusTC, changeTaskTitleTC, deleteTaskTC} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType} from \"./api/todolists-api\";\r\nimport LinearProgress from '@mui/material/LinearProgress'\r\nimport {ErrorSnackbar} from \"./ErrorSnackbar\";\r\nimport {RequestAppStatuses} from \"./state/app-reducer\";\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const status = useSelector<AppRootStateType, RequestAppStatuses>(state => state.app.status)\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(setTodolistTC())\r\n  }, [])\r\n\r\n  const addTodolist = useCallback((params: {title: string}) => {\r\n    dispatch(createTodolistTC({title: params.title}))\r\n  }, [dispatch]);\r\n  const changeTodolistTitle = useCallback((params: {todolistId: string, title: string}) => {\r\n    dispatch(changeTodolistTitleTC({title: params.title, todolistId: params.todolistId}))\r\n  }, []);\r\n  const changeTodolistFilter = useCallback((params: {filter: FilterValuesType, todolistId: string}) => {\r\n    const action = changeTodolistFilterAC({todolistId: params.todolistId, filter: params.filter});\r\n    dispatch(action);\r\n  }, []);\r\n  const removeTodolist = useCallback((params: {todolistId: string}) => {\r\n    dispatch(deleteTodolistTC({todolistId: params.todolistId}))\r\n  }, []);\r\n  const addTask = useCallback((params: {title: string, todolistId: string}) => {\r\n    dispatch(addTaskTC({title: params.title, todolistId: params.todolistId}))\r\n  }, []);\r\n  const changeTaskStatus = useCallback((params: {taskId: string, status: TaskStatuses, todolistId: string}) => {\r\n    dispatch(changeTaskStatusTC({taskId: params.taskId, status: params.status, todolistId: params.todolistId}))\r\n  }, []);\r\n  const changeTaskTitle = useCallback((params: {taskId: string, title: string, todolistId: string}) => {\r\n    dispatch(changeTaskTitleTC({taskId: params.taskId, title: params.title, todolistId: params.todolistId}))\r\n  }, []);\r\n  const removeTask = useCallback((params: {taskId: string, todolistId: string}) => {\r\n    dispatch(deleteTaskTC({todolistId: params.todolistId, taskId: params.taskId}))\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            News\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {status === 'loading' && <LinearProgress color=\"success\"/>}\r\n      <Container fixed>\r\n        <Grid container style={{padding: '20px'}}>\r\n          <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          {\r\n            todolists.map(tl => {\r\n              let allTodolistTasks = tasks[tl.id];\r\n\r\n              return <Grid item key={tl.id}>\r\n                <Paper style={{padding: '10px'}}>\r\n                  <Todolist\r\n                    id={tl.id}\r\n                    title={tl.title}\r\n                    tasks={allTodolistTasks}\r\n                    removeTask={removeTask}\r\n                    changeFilter={changeTodolistFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    filter={tl.filter}\r\n                    removeTodolist={removeTodolist}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodolistTitle={changeTodolistTitle}\r\n                  />\r\n                </Paper>\r\n              </Grid>\r\n            })\r\n          }\r\n        </Grid>\r\n        <ErrorSnackbar/>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n        <Provider store={store}>\n            <App/>\n        </Provider>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}